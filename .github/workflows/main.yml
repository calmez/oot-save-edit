name: Verify & Release

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]
  workflow_dispatch:

permissions:
  contents: write # for creating a release tag

jobs:
  verify:
    name: Verify
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: denoland/setup-deno@v2
        with:
          deno-version: "~2.4"
      - name: Install
        run: deno install --lock
      - name: Install web dependencies
        working-directory: ./ui/web
        run: deno install --allow-scripts --lock
      - name: Linting
        run: deno lint
      - name: Formatting
        run: deno fmt --check
      - name: Run tests
        run: deno test
      - name: Build web
        run: deno task build:web
      - name: Build Linux
        run: |
          deno task build:tui:linux-x86
          deno task build:tui:linux-aarch64
          deno task build:gui:linux-x86
          deno task build:gui:linux-aarch64
      - name: Build MacOS
        run: |
          deno task build:tui:mac-x86
          deno task build:tui:mac-aarch64
          deno task build:gui:mac-x86
          deno task build:gui:mac-aarch64
      - name: Build Windows
        run: |
          deno task build:tui:win
          deno task build:gui:win
  release:
    name: Build and Release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      - name: Install
        run: deno install --lock
      - name: Build
        run: deno task build:all
      - name: Version
        id: version
        uses: python-semantic-release/python-semantic-release@v9.21.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          vcs_release: true
          commit: false
      - name: Get Release by Tag
        id: get_release_by_tag
        uses: actions/github-script@v7
        with:
          script: |
            const tag = "${{ steps.version.outputs.tag }}";
            const release = await github.request(
              `/repos/${context.repo.owner}/${context.repo.repo}/releases/tags/${tag}`,
            );
            return release.data.upload_url;
          result-encoding: string
      - name: Zip release asset GUI MacOS ARM
        run: zip -r ./build/aarch64-apple-darwin/oot-save-edit_apple-silicon.app.zip ./build/aarch64-apple-darwin/oot-save-edit_apple-silicon.app
      - name: Upload release asset GUI MacOS ARM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.result }}
          asset_path: ./build/aarch64-apple-darwin/oot-save-edit_apple-silicon.app.zip
          asset_name: oot-save-edit_gui_macos-apple-silicon.app.zip
          asset_content_type: application/zip
      - name: Zip release asset GUI MacOS Intel
        run: zip -r ./build/x86_64-apple-darwin/oot-save-edit_intel.app.zip ./build/x86_64-apple-darwin/oot-save-edit_intel.app
      - name: Upload release asset GUI MacOS Intel
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.result }}
          asset_path: ./build/x86_64-apple-darwin/oot-save-edit_intel.app.zip
          asset_name: oot-save-edit_gui_macos-intel.app.zip
          asset_content_type: application/zip
      - name: Upload release asset GUI Linux ARM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.result }}
          asset_path: ./build/aarch64-unknown-linux-gnu/gui
          asset_name: oot-save-edit_gui_linux-arm
          asset_content_type: application/x-pie-executable
      - name: Upload release asset GUI Linux Intel
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.result }}
          asset_path: ./build/x86_64-unknown-linux-gnu/gui
          asset_name: oot-save-edit_gui_linux-intel
          asset_content_type: application/x-pie-executable
      - name: Upload release asset GUI Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.result }}
          asset_path: ./build/x86_64-pc-windows-msvc/gui.exe
          asset_name: oot-save-edit_gui.exe
          asset_content_type: application/x-dosexec
      - name: Upload release asset TUI MacOS ARM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.result }}
          asset_path: ./build/aarch64-apple-darwin/tui
          asset_name: oot-save-edit_tui_macos-apple-silicon
          asset_content_type: application/x-mach-binary
      - name: Upload release asset TUI MacOS Intel
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.result }}
          asset_path: ./build/x86_64-apple-darwin/tui
          asset_name: oot-save-edit_tui_macos-intel
          asset_content_type: application/x-mach-binary
      - name: Upload release asset TUI Linux ARM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.result }}
          asset_path: ./build/aarch64-unknown-linux-gnu/tui
          asset_name: oot-save-edit_tui_linux-intel
          asset_content_type: application/x-pie-executable
      - name: Upload release asset TUI Linux Intel
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.result }}
          asset_path: ./build/x86_64-unknown-linux-gnu/tui
          asset_name: oot-save-edit_tui_linux-arm
          asset_content_type: application/x-pie-executable
      - name: Upload release asset TUI Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.result }}
          asset_path: ./build/x86_64-pc-windows-msvc/tui.exe
          asset_name: oot-save-edit_tui.exe
          asset_content_type: application/x-dosexec
  docs:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Release Docs
    runs-on: ubuntu-latest
    needs: verify
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      - name: Install
        run: deno install --lock
      - name: Generate docs
        run: deno task build:docs
      - name: Deploy docs
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          folder: docs
          clean: true
          single-commit: true
          git-config-name: calmez-ghbot
          git-config-email: ghbot-noreply@calmez.net
